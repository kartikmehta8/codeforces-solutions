#include <bits/stdc++.h>
using namespace std;

#define FOR(X) for (int i = 0; i < X; i++)

int main() {
    
    #ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	#endif

	std::ios::sync_with_stdio(0);
	cin.tie(0);

	int T;
	cin >> T;
	FOR(T) {
		int N;
		cin >> N;
		int arr[N];
		FOR(N) arr[i] = -1;

		FOR(N*2) {
			int val;
			cin >> val;
			if (arr[val-1] == -1) {
				cout << val << " ";
				arr[val-1] = 0;
			} 
		}

		cout << "\n";
	}
    
    return 0;

}

// A permutation of length n is a sequence of integers from 1 to n of length n
// containing each number exactly once. For example, [1], [4,3,5,1,2],
// [3,2,1] are permutations, and [1,1], [0,1], [2,2,1,4] are not.

// There was a permutation p[1â€¦n]. It was merged with itself. In other words,
// let's take two instances of p and insert elements of the second p into the
// first maintaining relative order of elements. The result is a sequence of the
// length 2n.

// For example, if p=[3,1,2] some possible results are: [3,1,2,3,1,2],
// [3,3,1,1,2,2], [3,1,3,1,2,2]. The following sequences are not possible
// results of a merging: [1,3,2,1,2,3], [3,1,2,3,2,1], [3,3,1,2,2,1].

// For example, if p=[2,1] the possible results are: [2,2,1,1], [2,1,2,1]. The
// following sequences are not possible results of a merging: [1,1,2,2],
// [2,1,1,2], [1,2,2,1].

// Your task is to restore the permutation p by the given resulting sequence a.
// It is guaranteed that the answer exists and is unique.

// You have to answer t independent test cases.